namespace Lesson2Variable;

/// Переменные нужны, чтобы хранить в них какие-то данные.
/// Каждая переменная состоит из как минимум двух вещей:
/// 1) тип - задает, какой вид данных будет храниться в переменной.
///          например, число (20) или строка ("Петя")
/// 2) имя - задает название. Например, myAge - "мой возраст"
/// Также переменная может иметь значение (не обязательно):
/// 3) значение - то, что хранится внутри нашей переменной.
/// 
/// синтаксис объявления переменной:
/// <тип> <имя переменной>;
/// пример: string myName;
/// 
/// синтаксис присвоения значения:
/// <имя переменной> = <значение>;
/// пример: myName = "Данил";
/// Чтобы задать значение переменной, ее нужно сначала обязательно объявить!
/// 
/// Также можно одновременно объявить переменную и сразу задать ей значение:
/// <тип> <имя переменной> = <значение переменной>;
/// пример: string myName = "Данил";

class Variable {
  public void stringExample()
  {
    // для хранения текста используют тип string
    // значения таких переменных всегда заключают в двойные кавычки "..."
    string name;
    name = "Илон Маск";
    // тоже самое:
    // string name = "Илон Маск";
  }

  public void charExample()
  {
    // для хранения одиночного символа используют тип char
    // значения таких переменных всегда заключают в одиночные кавычки '...'
    char letter = 'Я'; // правильно
    // char letter2 = "Я"; // а вот так уже не скомпилируется
  }

  public void intExample()
  {
    // для хранения целых чисел используют тип int.
    int age = 14; // положительное
    int debt = -10; // отрицательное
  }

  public void floatExample()
  {
    // для хранения дробных чисел используют тип float.
    // такое число называют "число с плавающей точкой"
    // для таких чисел в конце всегда ставится буква "f"
    float bodyTemperature = 36.6f;
  }

  public void doubleExample()
  {
    // тоже самое, что float, но может хранить гораздо большие значения.
    // для таких чисел в конце всегда ставится буква "d"
    double veryBigNumber = 1495978707142343212.3d;
  }

  public void boolExample()
  {
    // для хранения значений по типу правда/ложь
    // может принимать только два значения: true или false
    bool iAmHuman = true;
    bool iCanFly = false;
  }

  public void order() {
    /// компилятор - это программа, которая считывает код, который мы написали
    /// и перевод ее в нули и единицы, которые понимает компьютер
    /// 
    /// т.к. компилятор - обычная (хоть и сложная) программа,
    /// она не может "додумать", что мы имели в виду
    /// поэтому она понимает только те инструкции, которые в нее прописали
    /// 
    /// вот как работает компилятор:
    /// 1) начиная с начала файла, он считывает его строка за строкой
    /// 2) каждый раз, когда он встречает объявление переменной, он ее запоминает
    /// 3) если он встречает имя переменной, которую он раньше не встречал, компилятор ломается (бросает ошибку)
    ///
    // объявляем переменную типа string с именем greeting
    // компилятор дочитал до 89 строки, увидел объявление переменной и "записал себе на бумажку"
    string greeting;
    // идем далее. Хотим присвоить значение для переменной
    // компилятор доходит до 93 строки и видит переменную greeting,
    // проверяет, что такая переменная у него уже записано - все окей. Присваивает ей значение.
    greeting = "Привет, прогер!";
    // идем далее. Видим объявление переменной и тут же присвоение - так тоже можно
    float speed = 80.5f;
    // Компилятор дочитал до 99 строки, видит переменную surprise
    // проверяет, записана ли у него такая переменная
    // не находит эту переменную, не знает что с этим делать и падает с ошибкой!
    // surprise = "Не работает!"; // расскоментируй эту строку
    // не поможет, даже если мы объявим эту переменную ниже
    string surprise;
  }

  public void changeVariable() {
    // Переменные называются так потому, что могут менять свое значение.
    // создали переменную типа int с именем  myNumber
    int myNumber;
    // присволили значение 10
    myNumber = 10;
    // присвоили значение 15;
    myNumber = 15;
    // присвоили значение 25;
    myNumber = 25;
  }

  public void naming() {
    /// переменные принятно называть так, чтобы
    /// 1) из названия было понятно, о чем они.
    /// 2) легко читаемые имена

    // пример хороших названий:
    int employeeSalary = 150; // "зарплата сотрудника"
    string customerName = "John"; // "имя покупателя"
    bool isShoppingCartEmpty = true; // "пустая ли корзина на сайте"

    // пример плохих названий:
    int a = 15; // непонятно, что это.
    int abc = 13; // Аббревиатуры тоже непонятны.
    string value; // "значение" - значение чего? Непонятно.

    // сейчас это звучит просто,
    // но порой над правильным названием приходится хорошо подумать.
  }

  public void variableAssignment() {
    // в переменные можно класть обычные значения:
    string january = "Январь"; // (January переводится "январь")
    // а можно класть другие переменные!
    string month = january; // теперь в month лежит значение "Январь";

    // "обычное" значение, которое присваивается "как есть" ("Январь"), называется "литерал"
    // примеры литералов: "Привет!", 16, true, 'Я', 12.5f
  }

  public void rareTypes() {
    // существует еще несколько других типов переменных,
    // они встречаются реже

    // для хранения только положительных целых чисел используют тип uint.
    uint age = 14; // положительное
    // uint debt = -10; // а вот отрицательное не скомпилируется!

    // для хранения очень маленьких чисел в диапозоне от 0 до 255
    byte tinyInt = 255;
    // byte tinyInt2 = 256; // не сработает

    // тоже что byte, но диапозон от -128 до 127
    sbyte negativeTinyInt = -128;
    // sbyte negativeTinyInt2 = -129; // не сработает

    // От −32 768 до 32 767
    short smallInt = 32767;

    // есть и другие, но они вряд ли поднадобятся
  }
}
